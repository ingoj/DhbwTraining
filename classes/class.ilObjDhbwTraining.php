<?php

require_once __DIR__ . "/../vendor/autoload.php";

/**
 * Class ilObjDhbwTraining
 *
 * @author: Benjamin Seglias   <bs@studer-raimann.ch>
 */
class ilObjDhbwTraining extends ilObjectPlugin implements ilLPStatusPluginInterface
{

    const CMD_CLONE = 'doCloneObject';
    const KEY_TRAINING_SESSION_UUID = "KEY_TRAINING_SESSION_UUID";
    const KEY_TRAINING_EVENTS = "KEY_TRAINING_EVENTS";


    /**
     * Constructor
     *
     * @access        public
     *
     * @param int $a_ref_id
     */
    public function __construct($a_ref_id = 0)
    {
        parent::__construct($a_ref_id);
    }


    public static function _lookupOnline($a_obj_id, $is_reference = false)
    {
        global $ilDB;

        if ($is_reference) {
            $result
                = $ilDB->queryF("SELECT rep_robj_xdht_settings.is_online FROM rep_robj_xdht_settings,object_reference WHERE object_reference.ref_id = %s AND object_reference.obj_id = rep_robj_xdht_settings.dhbw_training_object_id",
                array('integer'),
                array($a_obj_id)
            );
        } else {
            $result = $ilDB->queryF("SELECT rep_robj_xdht_settings.is_online FROM rep_robj_xdht_settings WHERE dhbw_training_object_id = %s",
                array('integer'),
                array($a_obj_id)
            );
        }
        if ($result->numRows() == 1) {
            $row = $ilDB->fetchAssoc($result);

            return $row["is_online"];
        }

        return 0;
    }

    /**
     * #SUR# return type definition
     * @param bool $clone_mode
     * @return void
     */
    protected function doCreate(bool $clone_mode = false): void
    {
        parent::doCreate(); // TODO: Change the autogenerated stub
    }

    /**
     * #SUR# return type definition
     * @return void
     */
    protected function doRead(): void
    {
        parent::doRead(); // TODO: Change the autogenerated stub
    }


    /**
     * #SUR# return type definition
     * @return void
     */
    public function doUpdate(): void
    {
        parent::doUpdate(); // TODO: Change the autogenerated stub
    }

    /**
     * #SUR# return type definition
     * @return void
     * @throws ilDatabaseException
     * @throws ilObjectNotFoundException
     */
    public function doDelete(): void
    {
        if (is_int(ilObjectFactory::getInstanceByRefId($_GET['ref_id'])->get())) {
            $xdht_participants = xdhtParticipant::where(array('training_obj_id' => ilObjectFactory::getInstanceByRefId($_GET['ref_id'])))->get();
            foreach ($xdht_participants as $xdht_participant) {
                $xdht_participant->delete();
            }
            xdhtSettings::where(array('training_obj_id' => ilObjectFactory::getInstanceByRefId($_GET['ref_id'])))->first()->delete();
        }
    }


    /**
     * #SUR# return type definition
     * @param ilObjDhbwTraining $new_obj     Instance of
     * @param int               $a_target_id obj_id of the new created object
     * @param int|null          $a_copy_id
     *
     * @return void
     * @throws arException
     */
    protected function doCloneObject(ilObject2 $new_obj, int $a_target_id, ?int $a_copy_id = null): void
    {
        assert(is_a($new_obj, ilObjDhbwTraining::class));

        $xdhtSettings = xdhtSettings::find(array('training_obj_id' => $this->getId()));
        if ($xdhtSettings instanceof xdhtSettings) {
            $xdht_settings_clone = $xdhtSettings->copy();
            $xdht_settings_clone->setDhbwTrainingObjectId($new_obj->getId());
            $xdht_settings_clone->create();
        }

        $xdhtParticipants = xdhtParticipant::where(array('training_obj_id' => $this->getId()))->get();
        if (!empty($xdhtParticipants)) {
            foreach ($xdhtParticipants as $xdhtParticipant) {
                $xdht_participant_clone = clone($xdhtParticipant);
                $xdht_participant_clone->setTrainingObjId($new_obj->getId());
                $xdht_participant_clone->update();
            }
        }
    }


    /**
     * #SUR# return type definition
     * Get all participants ids with LP status completed
     *
     * @return array
     */
    public function getLPCompleted(): array
    {
        return xdhtParticipant::where(array(
            'status'          => ilLPStatus::LP_STATUS_COMPLETED_NUM,
            'training_obj_id' => $this->getId()
        ))->getArray(null, 'usr_id');
    }


    /**
     * #SUR# return type definition
     * Get all participants ids with LP status not attempted
     *
     * @return array
     */
    public function getLPNotAttempted(): array
    {
        $operators = array(
            'status'          => '!=',
            'training_obj_id' => '='
        );
        $other_than_not_attempted = xdhtParticipant::where(array(
            'status'          => ilLPStatus::LP_STATUS_NOT_ATTEMPTED_NUM,
            'training_obj_id' => $this->getId()
        ), $operators)->getArray(null, 'usr_id');

        return array_diff($this->plugin->getMembers($this->plugin->lookupRefId($this->getId())), $other_than_not_attempted);
    }


    /**
     * #SUR# return type definition
     * Get all participants ids with LP status failed
     *
     * @return array
     */
    public function getLPFailed(): array
    {
        return xdhtParticipant::where(array(
            'status'          => ilLPStatus::LP_STATUS_FAILED_NUM,
            'training_obj_id' => $this->getId()
        ))->getArray(null, 'usr_id');
    }


    /**
     * #SUR# return type definition
     * Get all participants ids with LP status in progress
     *
     * @return array
     */
    public function getLPInProgress(): array
    {
        return xdhtParticipant::where(array(
            'status'          => ilLPStatus::LP_STATUS_IN_PROGRESS_NUM,
            'training_obj_id' => $this->getId()
        ))->getArray(null, 'usr_id');
    }


    /**
     * #SUR# return type definition
     * Get current status for given participant
     *
     * @param int $a_participant_id
     *
     * @return int
     */
    public function getLPStatusForUser($a_participant_id): int
    {
        $participant = xdhtParticipant::where(array(
            'usr_id'          => $a_participant_id,
            'training_obj_id' => $this->getId()
        ))->first();
        if ($participant) {
            return $participant->getStatus();
        }

        return ilLPStatus::LP_STATUS_NOT_ATTEMPTED_NUM;
    }

    /**
     * #SUR# return type definition
     * @return void
     */
    protected function initType(): void
    {
        $this->setType(ilDhbwTrainingPlugin::PLUGIN_PREFIX);
    }
}